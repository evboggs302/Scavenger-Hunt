type Query {
  getCluesByHuntId(id: String!): [CluePayload!]
}

type Mutation {
  createMultipleClues(input: CreateMultipleCluesInput!): [CluePayload!]
  createSingleClue(input: CreateSingleClueInput!): [CluePayload!]
  updateClueDescription(input: UpdateClueDescriptionInput!): CluePayload!
  updateClueOrder(input: UpdateClueOrderInput!): [CluePayload!]
  deleteClueById(clue_id: ID!): DeleteClues!
  deleteAllCluesByHuntId(hunt_id: ID!): DeleteClues!
}

type Clue {
  _id: ID!
  hunt_id: ID!
  order_number: Int
  description: String
  responses: [Responses]
}
union CluePayload =
    Clue
  | NotFoundError
  | AuthorizationError
  | InvalidInputError
  | UnknownError

union DeleteClues =
    Delete
  | NotFoundError
  | AuthorizationError
  | InvalidInputError
  | UnknownError

input CluesListItem {
  order_number: Int!
  description: String!
}

input CreateMultipleCluesInput {
  h_id: String!
  cluesList: [CluesListItem]!
}

input CreateSingleClueInput {
  h_id: String!
  clueItem: CluesListItem!
}

input UpdateClueDescriptionInput {
  clue_id: ID!
  newDescription: String!
}

input UpdateClueOrderInput {
  hunt_id: ID!
  newOrder: [String]!
}
