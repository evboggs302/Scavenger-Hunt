type Query {
  getAllUsers: [UserPayload]
  getSingleUser(uid: ID!): UserPayload
  logout: Boolean
  userNameExists(user_name: String!): Boolean
}

type Mutation {
  createUser(input: AddUserInput!): UserPayload
  login(user_name: String!, password: String!): Tokens
}

type FullUser {
  _id: ID!
  user_name: String!
  first_name: String!
  last_name: String!
  hash: String!
}

type UserPayload {
  _id: ID!
  user_name: String!
  first_name: String!
  last_name: String!
  hunts: [Hunt!]
}

type Tokens {
  """
  u_id is the id of the associated user
  """
  u_id: ID!
  u_name: String!
  accessToken: String!
  refreshToken: String!
}

input AddUserInput {
  first_name: String!
  last_name: String!
  user_name: String!
  password: String!
}
