type Query {
  getTeamsByHuntId(h_id: ID!): [TeamPayload!]
  getTeam(id: ID!): TeamPayload!
}

type Mutation {
  createSingleTeam(input: CreateSingleTeamInput!): TeamPayload!
  createMultipleTeams(input: CreateMultipleTeamsInput!): [TeamPayload!]
  updateTeam(input: UpdateTeamInput!): TeamPayload!
  deleteTeam(input: DeleteTeamInput!): DeleteTeam!
}

type Team {
  _id: ID!
  hunt_id: ID!
  recall_sent: Boolean
  last_clue_sent: Int
  members: [String]
  device_number: String
  responses: [ResponsePayload!]
}
union TeamPayload =
    Team
  | NotFoundError
  | AuthorizationError
  | InvalidInputError
  | UnknownError

union DeleteTeam =
    Delete
  | NotFoundError
  | AuthorizationError
  | InvalidInputError
  | UnknownError

input SingleTeam {
  members: [String!]
  device_number: String!
}

input CreateMultipleTeamsInput {
  h_id: String!
  teams: [SingleTeam]!
}

input CreateSingleTeamInput {
  h_id: String!
  members: [String]!
  device_number: String!
}

input UpdateTeamInput {
  team_id: ID!
  members: [String]
  device_number: String
}

input DeleteTeamInput {
  team_id: ID!
}
