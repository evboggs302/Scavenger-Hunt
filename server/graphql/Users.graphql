type Query {
  getAllUsers: [UserPayload]
  getUserFromToken(tkn: String!): BaseUserPayload!
  userNameExists(user_name: String!): Boolean!
}

type Mutation {
  registerUser(input: AddUserInput!): AuthPayload!
  login(input: LoginInput!): AuthPayload!
  logout: Boolean!
}

type BaseUserPayload {
  _id: ID!
  user_name: String!
  first_name: String!
  last_name: String!
}

type UserPayload {
  _id: ID!
  user_name: String!
  first_name: String!
  last_name: String!
  hunts: [Hunt!]
}

type AuthPayload {
  _id: ID!
  token: String!
}

input AddUserInput {
  first_name: String!
  last_name: String!
  user_name: String!
  password: String!
}

input LoginInput {
  user_name: String!
  password: String!
}
