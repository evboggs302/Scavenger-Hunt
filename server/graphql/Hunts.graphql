type Query {
  getHuntsByUserId: [HuntPayload]!
  getHunt(id: ID!): HuntPayload!
  activateHunt(id: ID!): HuntPayload!
  deactivateHunt(id: ID!): HuntPayload!
  deleteAllHuntsByUser: DeleteHunt!
}

type Mutation {
  createHunt(input: CreateHuntInput!): HuntPayload!
  updateHunt(input: UpdateHuntInput!): HuntPayload!
  deleteHuntById(h_id: ID!): DeleteHunt!
}

type Hunt {
  _id: ID!
  created_by: ID!
  name: String
  created_date: String
  start_date: String
  end_date: String
  is_active: Boolean
  recall_message: String
  clues: [Clue!]
  teams: [Team!]
}
union HuntPayload =
    Hunt
  | NotFoundError
  | AuthorizationError
  | InvalidInputError
  | UnknownError

union DeleteHunt =
    Delete
  | NotFoundError
  | AuthorizationError
  | InvalidInputError
  | UnknownError

input CreateHuntInput {
  name: String!
  start_date: String!
  end_date: String!
}

input UpdateHuntInput {
  hunt_id: String!
  start_date: String
  end_date: String
  recall_message: String
}
